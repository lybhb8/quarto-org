{
  "hash": "f4d9c6770472d21584b0473727031362",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 表格 #Tables\nengine: jupyter\n---\n\n## 概述\n\nQuarto 包含大量功能，旨在方便用户编写和定制标记符表格输出，包括\n\n- 指定列对齐方式和宽度\n- 提供标题、副标题和交叉引用。\n- 从可执行代码单元格动态生成表格。\n\n本文将深入介绍这些功能的使用。\n\n## 标记符表格\n\n最常用的标记符表格被称为管道表。管道表支持指定每列对齐方式和标题。例如\n\n::: {layout-ncol=\"2\"}\n\n:::: {}\n\n``` markdown\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n```\n\n::::\n\n:::: {}\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n\n::::\n\n:::\n\n开始和结束的管道字符是可选的，但所有列之间都需要管道。冒号表示列对齐，如图所示。表头不能省略，但可以通过包含空白单元格的表头来模拟无表头表格。\n\n由于管道表示列的边界，因此列不必像上例那样垂直对齐。因此，这是一个完全合法（虽然很难看）的管道表：\n\n``` markdown\nfruit| price\n-----|-----:\napple|2.05\npear|1.37\norange|3.09\n```\n\n管道表的单元格不能包含段落和列表等块元素，也不能跨多行。如果管道表中包含一行，其标记内容的宽度大于列宽（参见 `columns`选项），那么管道表将占用全部文本宽度，单元格内容将被换行，单元格的相对宽度由表头与表体之间的分隔线上的破折号数量决定。\n\n例如，`---|-` 将使第一列和第二列的宽度分别为全文宽度的 3/4 和 1/4 。另一方面，如果没有一行的宽度超过列宽，那么单元格内容将不会被包裹，单元格的大小将与内容一致。\n\n### 使用 Bootstrap 类\n\n作为表格标题旁边的属性给出的 Bootstrap 表格类会插入到 `<table>` 元素中。\n允许使用的类是那些明确适用于整个表格的类，它们是\n\"primary\"`, `\"secondary\"`, `\"success\"`, `\"danger\"`, `\"warning\"`, `\"info\"`, `\"light\"`, `\"dark\"`, `\"striped\"`, `\"hover\"`, `\"active\"`, `\"bordered\"`, `\"borderless\"`, `\"sm\"`, `\"responsive\"`, `\"responsive-sm\"`, `\"responsive-md\"`, `\"responsive-lg\"`, `\"responsive-xl\"`, `\"responsive-xxl\"`.\n例如，下面的 Markdown 表格将以行条纹呈现，悬停时还将突出显示行：\n\n::: {layout-ncol=\"2\"}\n\n:::: {}\n\n\n``` markdown\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {.striped .hover}\n```\n\n::::\n\n:::: {}\n\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {.striped .hover}\n\n::::\n\n:::\n\n### 创建\n\n对于只有几个单元格的简单表格，可以直接用 markdown 创建。表格越大，使用制作工具就越有意义。可以考虑使用的表格制作工具包括\n\n+------------------------------------------------------------------------+---------------------------------------------------------------+\n| [TablesGenerator](https://tablesgenerator.com/markdown_tables)         | 在线生成的markdown表格工具.                                                         |\n+------------------------------------------------------------------------+---------------------------------------------------------------+\n| [Emacs TableMode](https://www.emacswiki.org/emacs/TableMode)           | 基于文本的表格创建和编辑功能的Emacs.                                                       |\n+------------------------------------------------------------------------+---------------------------------------------------------------+\n| [Quarto Visual Editor](/docs/visual-editor/content.qmd#editing-tables) | 用于`.qmd`文件的可视化编辑器，支持表格编辑.                                                 |\n+------------------------------------------------------------------------+---------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[35,65\\]\"}\n\n## 列宽\n\n上面我们介绍了一种使用每列标题中破折号的相对数量来指定列宽的方法（例如__，`---|-`以获得双列表格的 75% / 25% 分割）。\n\n也可以使用 `tbl-colwidths` 属性或文档级选项明确指定列宽。对于单个标记符表格，请在标题后添加属性。例如\n\n::: {layout-ncol=\"2\"}\n\n:::: {}\n\n``` markdown\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[75,25]\"}\n```\n\n::::\n\n:::: {}\n\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[75,25]\"}\n\n::::\n\n:::\n\n如果表格没有标题，则仍可只指定 `tbl-colwidths` ：\n\n::: {layout-ncol=\"2\"}\n\n:::: {}\n\n``` markdown\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: {tbl-colwidths=\"[75,25]\"}\n```\n\n::::\n\n:::: {}\n\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: {tbl-colwidths=\"[75,25]\"}\n\n::::\n\n:::\n\n也可以在文档级别指定列宽（_例如_，以便在一组表格中使用统一的宽度）：\n\n``` yaml\n---\ntitle: \"My Document\"\nformat: html\ntbl-colwidths: [75,25]\n---\n```\n\n## 交叉引用\n\n对于由可执行代码单元格生成的表格，请使用带有 `tbl-` 前缀的标签，以便交叉引用。\n例如\n\n::: {#tbl-planets .cell tbl-cap='Astronomical object' execution_count=1}\n```` { .cell-code}\n```{{python}}\n#| label: tbl-planets\n#| tbl-cap: Astronomical object\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Sun\",\"696,000\",1.989e30],\n         [\"Earth\",\"6,371\",5.972e24],\n         [\"Moon\",\"1,737\",7.34e22],\n         [\"Mars\",\"3,390\",6.39e23]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Astronomical object\",\"R (km)\", \"mass (kg)\"]\n))\n```\n\n````\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=1}\nAstronomical object    R (km)      mass (kg)\n---------------------  --------  -----------\nSun                    696,000     1.989e+30\nEarth                  6,371       5.972e+24\nMoon                   1,737       7.34e+22\nMars                   3,390       6.39e+23\n:::\n:::\n\n\n::: callout-important\n## Label Prefix\n\n为了使表格可以交叉引用，其标签必须以 `tbl-` 前缀开头。\n:::\n\n\n\nFor markdown tables, add a caption below the table, then include a `#tbl-` label in braces at the end of the caption. For example:\n\n``` markdown\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\n```\n\nWhich looks like this when rendered to HTML:\n\n![](images/crossref-table.png){fig-alt=\"A table with 3 columns and four rows. The text 'Table 1: My Caption' is above the header column. The text 'See tbl. 1' is aligned to the left underneath the last column.\" width=\"500\"}\n\n\n\n更多详情，请参阅 [交叉引用](cross-references.qmd \"Cross References\") 一文。\n\n### 副表格\n\n您可能希望创建一个由多个子表格组成的组合。为此，请创建一个带有主标识符的 div，然后将子标识符（以及可选的标题文本）应用到所包含的表格中。例如\n\n``` markdown\n::: {#tbl-panel layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\n```\n\n渲染成 HTML 时看起来是这样的：\n\n![](/docs/authoring/images/crossref-subtable.png){fig-alt=\"Two tables side-by-side. Both tables have 3 columns and 4 rows. The table on the left is titled '(a) First table'. The table on the right is titled '(b) Second Table'. Centered underneath both tables is the text 'Table 1: Main Caption'. The text 'See tbl. 2 for details, especially tbl. 2 (b)' is aligned to the left underneath that.\"}\n\n请注意，表格的 \"主标题 \"是作为包含 div 的最后一个块提供的。\n\n\n\n### 标题位置\n\n默认情况下，表格标题位于表格上方。你可以使用 `tbl-cap-location` 选项修改这一行为。例如\n\n``` yaml\n---\ntbl-cap-location: top\n---\n```\n\n请注意，该选项是在顶层指定的，因此 PDF 和 HTML 格式都可以共享。如果只针对一种格式，可以将其与其他 `format` 特定选项放在一起。\n\n标题位置的有效值包括\n\n| Value    | Description                           |\n|----------|---------------------------------------|\n| `top`    | 标题位于表头顶部.                       |\n| `bottom` | Position the caption below the table. |\n| `margin` | Position the caption in the margin.   |\n\n请参阅[文章布局](article-layout.qmd#margin-captions)一文，了解在页边空白处放置标题的更多详情。\n\n##  计算方法\n\n请参阅[文章布局](article-layout.qmd#margin-captions)一文，了解在页边空白处放置标题的更多详情。\n\n##  计算方法\n\n上述所有选项都适用于由可执行代码单元格生成的表格。例如，在这里我们使用 Python [tabulate](https://pypi.org/project/tabulate/) 包和 IPython [display](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#) 模块中的 `Markdown()` 函数来打印markdown表格：\n\n::: {#tbl-planet-measures .cell tbl-cap='Astronomical object' execution_count=2}\n```` { .cell-code}\n```{{python}}\n#| label: tbl-planet-measures\n#| tbl-cap: Astronomical object\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Sun\",\"696,000\",1.989e30],\n         [\"Earth\",\"6,371\",5.972e24],\n         [\"Moon\",\"1,737\",7.34e22],\n         [\"Mars\",\"3,390\",6.39e23]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Astronomical object\",\"R (km)\", \"mass (kg)\"]\n))\n```\n\n````\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=2}\nAstronomical object    R (km)      mass (kg)\n---------------------  --------  -----------\nSun                    696,000     1.989e+30\nEarth                  6,371       5.972e+24\nMoon                   1,737       7.34e+22\nMars                   3,390       6.39e+23\n:::\n:::\n\n\n在这里，我们将 `tbl-cap` 和 `tbl-colwidths` 选项应用到使用 knitr `kable()` 函数编写markdown表格的代码单元格中：\n\n```{{r}}\n#| label: tbl-cars\n#| tbl-cap: \"Cars\"\n#| tbl-colwidths: [60,40]\n\nkable(head(cars))\n```\n\n如果代码单元会生成多个表格，还可以使用单元格选项指定副标题和布局：\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\n````python\n```{{python}}\n#| label: tbl-example\n#| tbl-cap: \"Example\"\n#| tbl-subcap: \n#|   - \"MPG\"\n#|   - \"Taxis\"\n#| layout-ncol: 2\n\nimport seaborn as sns\nfrom IPython.display import Markdown, display\nmpg = sns.load_dataset(\"mpg\").head(10)\ntaxis = sns.load_dataset(\"taxis\").head(10)\n\ndisplay(Markdown(mpg.to_markdown(index = False)))\ndisplay(Markdown(taxis.to_markdown(index = False)))\n```\n````\n\n请注意，我们使用了从 `IPython` 中导入的 [`display()`](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display) 函数，这样就可以从一个单元格中呈现多个输出(默认情况下，单元格只输出最后一个表达式)\n\n## R\n\n````python\n```{{r}}\n#| label: tbl-example\n#| tbl-cap: \"Example\"\n#| tbl-subcap: \n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n\nlibrary(knitr)\nkable(head(cars))\nkable(head(pressure))\n```\n````\n\n\n:::\n\n### 网格表格\n\n网格表是一种更高级的 markdown 表格，允许使用任意块元素（多个段落、代码块、列表等）。例如\n\n\n``` markdown\n+-----------+-----------+--------------------+\n| Fruit     | Price     | Advantages         |\n+===========+===========+====================+\n| Bananas   | $1.34     | - built-in wrapper |\n|           |           | - bright color     |\n+-----------+-----------+--------------------+\n| Oranges   | $2.10     | - cures scurvy     |\n|           |           | - tasty            |\n+-----------+-----------+--------------------+\n\n: 网格表示例\n```\n\n渲染 `HTML` 成这样的：\n\n+-----------+-----------+--------------------+\n| Fruit     | Price     | Advantages         |\n+===========+===========+====================+\n| Bananas   | $1.34     | - built-in wrapper |\n|           |           | - bright color     |\n+-----------+-----------+--------------------+\n| Oranges   | $2.10     | - cures scurvy     |\n|           |           | - tasty            |\n+-----------+-----------+--------------------+\n\n: 网格表示例\n\n\n行`=`分隔表头和表体，无表头表格可以省略。不支持跨越多列或多行的单元格。\n\n与管道表一样，可以通过在表头后的分隔线边界上加上冒号来指定对齐方式：\n\n\n``` markdown\n+---------+--------+------------------+\n| Right   | Left   | Centered         |\n+========:+:=======+:================:+\n| Bananas | $1.34  | built-in wrapper |\n+---------+--------+------------------+\n```\n渲染` HTML `成这样的：\n\n+---------+--------+------------------+\n| Right   | Left   | Centered         |\n+========:+:=======+:================:+\n| Bananas | $1.34  | built-in wrapper |\n+---------+--------+------------------+\n\n\n对于无表头的表格，`冒号`放在顶行：\n\n``` markdown\n+----------:+:----------+:--------:+\n| Right     | Left      | Centered |\n+-----------+-----------+----------+\n```\n\n渲染 `HTML` 成这样的：\n\n+----------:+:----------+:--------:+\n| Right     | Left      | Centered |\n+-----------+-----------+----------+\n\n\n请注意，使用纯文本编辑器编写网格表非常麻烦（因为与管道表不同，列指示器必须对齐）。以下是一些可以帮助创建网格表的工具：\n\n-   Emacs' [table-mode](https://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Based-Tables.html) (`M-x table-insert`)\n-   Quarto [Visual Editor](https://quarto.org/docs/visual-editor/content.html#editing-tables)\n-   Tables Generator's [Plain Text mode](https://www.tablesgenerator.com/text_tables) with `Use reStructuredText syntax` enabled\n\n## HTML 表格\n\nQuarto 可以处理 `html` `RawBlock` 节点（即`{=html}`）中的 HTML 表格，并将其转换为 Markdown 表格，而无需考虑输出格式（有意包括非 HTML 格式）。\n因此，您可以在文档中使用 HTML 表格语法，并将其转换为适用于所有格式的 Markdown 语法。\n此外，以 HTML 格式输出计算表格的库可以在其他输出格式中使用。\n\n例如，请看下面的原生 HTML 块：\n\n````markdown\n```{=html}\n<table>\n  <caption>As described in the section above, Quarto tables are great.</caption>\n  <thead>\n    <tr>\n      <th>Header 1</th>\n      <th>Header 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/African_Bush_Elephant.jpg/220px-African_Bush_Elephant.jpg\" alt=\"African Bush Elephant\" /></td>\n      <td>Regular output</td>\n    </tr>\n  </tbody>\n</table>\n```\n````\n\n渲染`HTML` 和 `PDF` 格式的输出结果如下：\n\n::: {layout-ncol=2}\n\n:::: {}\n### HTML Output\n\n\n```{=html}\n<table>\n  <caption>As described in the section above, Quarto tables are great.</caption>\n  <thead>\n    <tr>\n      <th>Header 1</th>\n      <th>Header 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n    <td><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/African_Bush_Elephant.jpg/220px-African_Bush_Elephant.jpg\" alt=\"African Bush Elephant\" /></td>\n      <td>Regular output</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n::::\n\n:::: {}\n### PDF Output\n\n![](images/raw-table-pdf.png){.border fig-alt=\"Screenshot of PDF output showing a table with a caption and two columns. The column headers are Header 1 and Header 2, and the cell contents are an image of an elephant and text that reads Regular Output.\"}\n::::\n\n:::\n\n此外，Quarto 还支持在表格中指定嵌入式 Markdown 内容。\n这是通过在嵌入的 `span` 或 `div` 节点中提供数据属性 `qmd` 或 `qmd-base64` 来实现的。\n这些节点可以出现在允许出现此类内容的任何地方：表头、页脚、单元格、标题等。\n\n例如，下表包含一个交叉引用、markdown 格式和一个简码：\n\n:::: {layout-nrow=\"2\"}\n\n::: {}\n\n```` markdown\n## HTML Tables Example {#sec-html-tables}\n\n```{=html}\n<table>\n  <caption><span data-qmd=\"As described in [Section -@sec-html-tables], Quarto are great.\"></span></caption>\n  <thead>\n    <tr>\n      <th><span data-qmd=\"_Header 1_\"></span></th>\n      <th><span data-qmd=\"_Header 2_\"></span></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><span data-qmd=\"{{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}}\"></span></td>\n      <td>Regular output</td>\n    </tr>\n  </tbody>\n</table>\n```\n````\n\n:::\n\n::: {}\n\n翻译如下:\n\n## HTML 表格范例 {#sec-html-tables}\n\n\n```{=html}\n<table>\n  <caption><span data-qmd=\"As described in [Section -@sec-html-tables], Quarto are great.\"></span></caption>\n  <thead>\n    <tr>\n      <th><span data-qmd=\"_Header 1_\"></span></th>\n      <th><span data-qmd=\"_Header 2_\"></span></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><span data-qmd=\"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\"></span></td>\n      <td>Regular output</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n\n:::\n\n::::\n\n\n## 禁用的 Quarto 表格处理功能\n\nQuarto 对 HTML 表格的处理可能会干扰用 R 和 Python（或其他支持的语言）表格包计算生成的 HTML。\n\n你可以使用选项 `html-table-processing` 在文档级或项目级禁用 Quarto 的 HTML 表格处理功能：\n\n```{.yaml}\n---\nformat:\n  html:\n    html-table-processing: none\n---\n```\n\n该选项也可作为 Knitr 和 Jupyter 的代码单元选项，例如\n\n\n````{markdown}\n```{{r}}\n#| html-table-processing: none\n\n# R Code that generates an HTML table\n```\n````\n\n\n要禁用 Quarto 对文档部分内容的 HTML 表格处理，请使用带有属性 `html-table-processing=\"none\" ` 的 div：\n\n````{.markdown}\n::: {html-table-processing=\"none\"}\n\n含有不希望处理的 HTML 表格的内容。\n\n:::\n````\n\n### 库作者\n\n如果您是输出 HTML 表格的库的作者，您可以通过在 `<table>` 元素中添加属性 `data-quarto-disable-processing=\"true\"` 来禁用 Quarto 对 HTML 表格的处理。例如\n\n```html\n<table data-quarto-disable-processing=\"true\">\n  ...\n</table>\n```\n\n",
    "supporting": [
      "tables_files"
    ],
    "filters": [],
    "includes": {}
  }
}