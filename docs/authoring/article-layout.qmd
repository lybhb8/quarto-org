---
title: "文章布局" #"Article Layout"
format: html
reference-location: margin
citation-location: margin
aliases:
  - page-layout.html
---

## 概述

Quarto 支持多种页面布局选项，使您能够编写以下内容：

- 填充主内容区域
- 溢出内容区域
- 横跨整个页面
- 占据文档边距

Quarto 使用列的概念来描述页面布局（如 "正文 "列、"页边距 "列等）。下面我们将介绍如何将内容安排到这些列中。如果需要调整列宽，请参阅 [页面布局 - 网格自定义](/docs/output-formats/page-ayout.qmd#grid-customization "Page Layout - Grid Customization")。

本文档中描述的所有布局功能都适用于 HTML 输出，许多功能也适用于 PDF 和 LaTeX 输出。有关 PDF / LaTeX 输出的详细信息，请参阅 [PDF/LaTeX 布局]。

## 正文栏

默认情况下，元素在文档正文中的位置允许跨越文档内容，如下所示。

::: {.layout-example .column-body}
.column-body
:::

但是，如果您愿意，可以创建一个带有 .`column-body-outset` 类的 div，将内容稍微扩展到正文范围之外。例如：

``` markdown
:::{.column-body-outset}
Outset content...
:::
```

::: {.layout-example .column-body-outset}
.column-body-outset
:::

## Page Column

如果您的内容需要更大的空间，您可以使用 `.column-page` 类来使内容更宽，但不会扩展到整个文档。

::: {.layout-example .column-page}
.column-page
:::

例如，要创建更宽的图像，可以使用

``` markdown
:::{.column-page}
![](images/elephant.jpg)
:::
```

::: column-page
![](images/elephant.jpg){fig-alt="Three walking elephants in silhouette against the backdrop of a sunset."}
:::

对于计算输出，您可以在代码单元选项中指定页面列。例如

```{r}
#| column: page
#| echo: fenced

knitr::kable(
  mtcars[1:6, 1:10]
)
```

此外，您还可以使用 `.column-page-inset` 将元素从页面中稍微嵌入，就像这样：

::: {.layout-example .column-page-inset}
.column-page-inset
:::

## Screen Column

您可以让内容横跨页面的整个宽度，而不留边距（full bleed）。为此，请使用".column-screen "类或在代码单元格中指定 "column: screen"。例如

``` md
::: {.column-screen}
![A full screen image](/image.png)
:::
```

::: {.layout-example .column-screen}
.column-screen
:::

以下代码会在整个页面上显示传单地图。

```{r}
#| column: screen
#| echo: fenced

library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

### 屏幕镶嵌

如果您想要全宽的外观，但又想保留边距，可以在列上使用内嵌或内嵌阴影修饰符。例如

``` md
::: {.column-screen-inset}
![A full screen image](/image.png)
:::
```

::: {.layout-example .column-screen-inset}
.column-screen-inset
:::

内嵌阴影修改器会产生一个全宽的块，但会用浅色阴影背景包裹。例如

```{r}
#| column: screen-inset-shaded
#| echo: fenced

library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

像 "screen-inset-shaded "这样的列布局可以与高级图片布局一起使用。例如，可以直接创建横跨整个文档的多列图表：

```{r}
#| column: screen-inset-shaded
#| layout-nrow: 1
#| echo: fenced

plot(cars)
plot(iris)
plot(pressure)
```

## 边距

您可以在 Quarto 文档的右边空白处放置内容。例如，这里我们使用 `.column-margin` 类在页边空白处放置一张图片：

``` md
::: {.column-margin}
![A margin image](image.png)
:::
```

::: {.layout-example .column-margin style="margin-top: 18px;"}
.column-margin
:::

这也适用于文本内容：

``` md
::: {.column-margin}
We know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:

$$\frac{d}{dx}\left( \int_{a}^{x} f(u)\,du\right)=f(x).$$
:::
```

::: 贴边 | column-margin
We know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:

$$\frac{d}{dx}\left( \int_{a}^{x} f(u)\,du\right)=f(x).$$
:::

### 贴边图片 | Margin Figures

使用 "column: margin "代码单元格选项，可以将使用代码单元格创建的图片放在页边空白处。如果代码生成的图片不止一个，则每个图片都将放在页边空白处。

```{r}
#| label: fig-mtcars
#| fig-cap: "MPG vs horsepower, colored by transmission."
#| column: margin
#| echo: fenced

library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

### 贴边表格 | Margin Tables

You an also place tables in the margin of your document by specifying `column: margin`.

```{r}
#| column: margin
#| echo: fenced

knitr::kable(
  mtcars[1:6, 1:3]
)
```

### 多个输出 | Multiple Outputs

您还可以将特定输出类型（例如数字）放在页边空白处。例如，以下代码将渲染一个显示部分 `mtcars` 数据集的表格，并在表格旁边的空白处生成一个图表。

```{r}
#| fig-column: margin
#| echo: fenced

mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)

knitr::kable(
  mtcars[1:6, 1:6]
)

library(ggplot2)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

{{< include _pagebreak.qmd >}}

## 页边引用

脚注和参考书目通常出现在文档末尾，但您也可以通过在文档正文中设置以下选项[^1]，将它们放在页边：

``` yaml
---
reference-location: margin
citation-location: margin
---
```

设置这些选项后，脚注和引文将（分别）自动放在文档的页边空白处，而不是页面底部。例如，当我引用 @xie2018 时，引用书目条目本身就会出现在页边空白处。

### 旁注

旁注允许你将内容放置在旁注内容之外。旁注看起来像脚注，但不包括脚注标记（上标数字）。[这是一个具有 "aside "类的 span，将其置于页边，但不包含脚注编号。]{.aside}.

``` markdown
[This is a span that has the class `aside` which places it in the margin without a footnote number.]{.aside}
```

## 页边标题

对于图和表，您可以将内容留在文档的正文中，而将标题放在文档的页边。在代码单元格或文档正文中使用 `cap-location: margin` 来控制。例如

```{r}
#| label: fig-cap-margin
#| fig-cap: "MPG vs horsepower, colored by transmission."
#| cap-location: margin
#| echo: fenced

library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

## 溢出的内容

通过使用 `body`、`page` 和 `screen` 列的 `right` 和 `left` 版本来布局内容，您还可以仅在文档的左侧或右侧扩展正文区域以外的内容。这些列的 "左 "或 "右 "版本如下：

::: {.layout-example .column-body-outset-right .left}
.column-body-outset-right
:::

::: {.layout-example .column-page-inset-right .left}
.column-page-inset-right
:::

::: {.layout-example .column-page-right .left}
.column-page-right
:::

::: {.layout-example .column-screen-inset-right .left}
.column-screen-inset-right
:::

::: {.layout-example .column-screen-right .left}
.column-screen-right
:::

::: {.layout-example .column-body-outset-left .right}
.column-body-outset-left
:::

::: {.layout-example .column-page-inset-left .right}
.column-page-inset-left
:::

::: {.layout-example .column-page-left .right}
.column-page-left
:::

::: {.layout-example .column-screen-inset-left .right}
.column-screen-inset-left
:::

::: {.layout-example .column-screen-left .right}
.column-screen-left
:::

使用带有上述类别之一的 div，将内容对齐到其中一个溢出区域。使用可执行代码单元格的 "column "选项也同样有效：

```{r}
#| column: screen-inset-right
#| echo: fenced

library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

## 引用选项 | Options Reference

### 全局选项 | Global Options

某些布局选项可以在文档 yaml 中全局指定。例如：

``` yaml
---
fig-cap-location: margin
reference-location: margin
---
```

以下所有选项目前都只支持设置`margin`值，该值会告诉 Quarto 将相应元素置于边距中。

+----------------------+---------------------------------------------------------------------------------------------------------+
| Option               | Description                                                                                             |
+======================+=========================================================================================================+
| `reference-location` | Where to place footnotes. Defaults to `document`.\                                                      |
|                      | \[`document` \| `section` \| `block` \| `margin` \]                                                     |
+----------------------+---------------------------------------------------------------------------------------------------------+
| `citation-location`  | Where to place citations. Defaults to `document`.\                                                      |
|                      | \[`document` \| `margin` \]                                                                             |
+----------------------+---------------------------------------------------------------------------------------------------------+
| `cap-location`       | Where to place figure and table captions. Defaults to `bottom` for figures and `top` for tables.\ |
|                      | \[`top` \| `bottom` \| `margin`\]                                                                       |
+----------------------+---------------------------------------------------------------------------------------------------------+
| `fig-cap-location`   | Where to place figure captions. Defaults to `bottom`.\                                                  |
|                      | \[`top` \| `bottom` \| `margin`\]                                                                       |
+----------------------+---------------------------------------------------------------------------------------------------------+
| `tbl-cap-location`   | Where to place table captions. Defaults to `top`.\                                                      |
|                      | \[`top` \| `bottom` \| `margin`\]                                                                       |
+----------------------+---------------------------------------------------------------------------------------------------------+

### 代码单元选项 | Code Cell Options

您还可以为特定代码单元格设置布局列。这可以控制代码单元格生成内容的布局。

```{{r}}
#| column: page

plot(cars)
```

::: column-page-right
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| Option             | Description                                                                                                                  |
+====================+==============================================================================================================================+
| `column`           | Layout column to use for code cell outputs. See column options below.                                                        |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| `fig-column`       | Layout column to use for code cell figure outputs. See column options below.                                                 |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| `tbl-column`       | Layout column to use for code cell table outputs. See column options below.                                                  |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| `cap-location`     | Where to place figure and table captions produced by this code cell. Defaults to `bottom` for figures and `top` for tables.\ |
|                    | \[`top` \| `bottom` \| `margin`\]                                                                                            |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| `fig-cap-location` | Where to place captions for figures produced by this code cell. Defaults to `inline`.\                                       |
|                    | \[`inline` \| `margin`\]                                                                                                     |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
| `tbl-cap-location` | Where to place captions for tables produced by this code cell. Defaults to `inline`.\                                        |
|                    | \[`inline` \| `margin`\]                                                                                                     |
+--------------------+------------------------------------------------------------------------------------------------------------------------------+
:::

### 类 | Using Classes

除了全局和代码单元特定选项外，您还可以使用带有布局类（前缀为 `.column-`）的 div 将内容排列成列：

``` md
::: {.column-margin}
This content will appear in the margin!
:::
```

### 可用列 | Available Columns

以下是所有可用列的指定符：

::: column-page-right
+--------------+---------------------------------+---------------------------------+
| Column       | Code Cell `column`              | Class Name                      |
+==============+=================================+=================================+
| Body         |     column: body                |     .column-body                |
|              |     column: body-outset         |     .column-body-outset         |
|              |     column: body-outset-left    |     .column-body-outset-left    |
|              |     column: body-outset-right   |     .column-body-outset-right   |
+--------------+---------------------------------+---------------------------------+
| Page Inset   |     column: page-inset-left     |     .column-page-inset-left     |
|              |     column: page-inset-right    |     .column-page-inset-right    |
+--------------+---------------------------------+---------------------------------+
| Page         |     column: page                |     .column-page                |
|              |     column: page-left           |     .column-page-left           |
|              |     column: page-right          |     .column-page-right          |
+--------------+---------------------------------+---------------------------------+
| Screen Inset |     column: screen-inset        |     .column-screen-inset        |
|              |     column: screen-inset-shaded |     .column-screen-inset-shaded |
|              |     column: screen-inset-left   |     .column-screen-inset-left   |
|              |     column: screen-inset-right  |     .column-screen-inset-right  |
+--------------+---------------------------------+---------------------------------+
| Screen       |     column: screen              |     .column-screen              |
|              |     column: screen-left         |     .column-screen-left         |
|              |     column: screen-right        |     .column-screen-right        |
+--------------+---------------------------------+---------------------------------+
| Margin       |     column: margin              |     .column-margin              |
+--------------+---------------------------------+---------------------------------+
:::

## PDF/LaTeX布局 {data-link="PDF/LaTeX Layout"}

虽然 HTML 和 PDF 输出都支持所述的大部分布局功能，但有些功能仅适用于 HTML 输出。您可以在 HTML 中使用全套列。然后，当您渲染 PDF 或 LaTeX 输出时，内容将自动放置在最合适的相关列中（通常这意味着使用主列和右边距）。以下是列的映射方式：

- 任何使用右边距的列（如 `page`、`screen`、`screen-right` 等）在 LaTeX 中将呈现为 `page-right`。
- 任何使用左边距的列都将被渲染为正常的正文内容。

### 页面几何 | Page Geometry

当您使用页边空白或跨页内容渲染 PDF 时，Quarto 会自动调整默认 Quarto LaTeX 文档类（KOMA `scrartcl`、`scrreport` 或 `scrbook`）的页面几何形状，以创建稍窄的正文内容区域和稍宽的页边空白区域。这种调整将结合已知的纸张尺寸，为大多数内容创建合理的页面几何形状。

您可以通过在文档前部设置 `geometry` 选项来直接控制页面几何。例如：

``` yaml
---
geometry:
  - left=.75in
  - textwidth=4.5in
  - marginparsep=.25in
  - marginparwidth=2.25in
---
```

您可以使用这些选项来控制内置文档类的页面几何形状，或自定义您可能使用的其他文档类的几何形状。

::: {.callout-tip appearance="simple"}
如果想在渲染的 PDF 中查看页面几何图形，可将 `showframe` 传递给 `geometry` 选项，如下例所示。

``` {.yaml style="background: none;"}
---
geometry:
  - showframe
---
```
:::

### 代码块 | Code Blocks

在渲染使用页边空白的 PDF 内容时，Quarto 会自动调整代码块的外观。不是使用纯背景色，而是使用左边界处理。

这样，非断续代码就能溢出到页边，而不会因代码块背景（不会溢出到页边区域）而产生外观问题。

您可以通过在文档正文中设置以下 `code-block-border-left: false` 来禁用这种处理方法。

[^1]: 您也可以将引用放在其他位置（如代码块、章节或文档的底部）。
