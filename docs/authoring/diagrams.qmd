---
title: 图表 #"Diagrams"
aliases:
  - /docs/prerelease/1.3/mermaid.html
---

## Overview|概述

Quarto 本机支持嵌入 [Mermaid](https://mermaid-js.github.io/mermaid/#/) 和 [Graphviz](https://graphviz.org/) 图表。这使您能够使用受 markdown 启发的纯文本语法创建流程图、序列图、状态图、甘特图等。

例如，这里我们嵌入了一张使用Mermaid创建的流程图：

```{mermaid}
%%| echo: fenced
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

如上图所示，Mermaid 图表使用"{mermaid}"可执行单元格嵌入。 Graphviz 图表使用 `{dot}` 可执行单元格嵌入。请注意，单元格选项的添加语法略有不同： `%%|` 用于 `{mermaid}`，而 `//|` 用于 `{dot}`。 


::: callout-note
对于 `pdf`或 `docx`等打印输出格式，图表渲染会使用 Chrome 或 Edge 网页浏览器创建高质量的 PNG。Quarto 可以自动使用系统中现有的 Chrome 或 Edge 版本，如果没有安装这两种浏览器，也可以使用更轻量级的 Chrome 库版本（详情请参见下面的 [Chrome 安装](#chrome-install)。
:::

## Mermaid

Mermaid 是一款基于 Javascript 的图表制作工具，它使用 Markdown 启发的文本定义和渲染器来创建和修改复杂的图表。

Mermaid图表使用 `%%` 作为注释语法，因此单元格选项使用 `%%|` 声明。单元格选项 **必须** 直接包含在图表代码块的开头下方。

上面我们演示了使用美人鱼创建的流程图，下面是一个序列图（也是使用 `{mermaid}` 可执行单元格嵌入的）：

```{mermaid}
%%| echo: fenced
sequenceDiagram
  participant Alice
  participant Bob
  Alice->>John: Hello John, how are you?
  loop Healthcheck
    John->>John: Fight against hypochondria
  end
  Note right of John: Rational thoughts <br/>prevail!
  John-->>Alice: Great!
  John->>Bob: How about you?
  Bob-->>John: Jolly good!
```

请注意，Mermaid 输出因目标格式（如 HTML 与基于打印的格式）而异。更多详情，请参阅下面的 [Mermaid Formats](#mermaid-formats "Mermaid格式") 部分。

要了解有关使用 Mermaid 的更多信息，请参阅 [Mermaid 网站](https://mermaid-js.github.io/mermaid/) 或 [Mermaid 书籍](https://www.amazon.com/Official-Guide-Mermaid-js-beautiful-flowcharts-dp-1801078025/dp/1801078025)（由 Mermaid 创建者撰写）。

## Graphviz

Graphviz 布局程序以简单的文本语言对图表进行描述，并以有用的格式制作图表。Graphviz 为具体的图表提供了许多有用的功能，如颜色、字体、表格节点布局、线条样式、超链接和自定义形状等选项。

Graphviz 图表使用 `//` 作为注释语法，因此单元格选项使用 `//|` 声明。单元格选项必须***直接包含在图表代码块的开头下方。

例如，下面是一个使用 graphviz 创建的简单无向图：

```{dot}
//| echo: fenced
graph G {
  layout=neato
  run -- intr;
  intr -- runbl;
  runbl -- run;
  run -- kernel;
  kernel -- zombie;
  kernel -- sleep;
  kernel -- runmem;
  sleep -- swap;
  swap -- runswap;
  runswap -- new;
  runswap -- runmem;
  new -- runmem;
  sleep -- runmem;
}
```


要了解有关 Graphviz 的更多信息，请参阅 [Graphviz 网站](https://graphviz.org/)、简单的 [Graphiz 示例](https://renenyffenegger.ch/notes/tools/Graphviz/examples/index) 或 [Graphviz 图库](https://graphviz.org/gallery/)。

## Authoring|创作

有多种工具可以提高您绘制图表的效率：

1) [Mermaid Live Editor](https://mermaid.live/ "Mermaid实时编辑器") 是实时编辑和预览美人鱼图表的在线工具。

2)  [Graphviz Online](https://dreampuf.github.io/GraphvizOnline/) 提供了用于编辑 Graphviz 图表的类似工具.

3)  [RStudio](https://www.rstudio.com/products/rstudio/download/) 包括对编辑和预览 `.mmd` 和 `.dot` 文件的支持 (帮助在 [DiagrammeR](https://rich-iannone.github.io/DiagrammeR/)).

4)  Quarto [VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) 支持实时预览嵌入到 `.qmd` 文件以及 `.mmd` 和 `.dot` 文件中的图表：

    ![](images/vscode-graphviz.gif){.border fig-alt="A Quarto document being edited in Visual Studio Code, with a live preview of the currenly edited diagram shown in a pane to the right"}

    请注意，您应该确保已经安装了 [最新版](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) 的 `Quarto VS Code extension`插件

## Cross-References|交叉引用

图表可以像图像和绘图输出一样被视为数字。例如，如果我们在上面的图表中添加以下数字选项：

```{{dot}}
//| label: fig-simple
//| fig-cap: "This is a simple graphviz graph."
```

会得到这样的输出结果：

```{dot}
//| label: fig-simple
//| fig-cap: "This is a simple graphviz graph."
graph G {
  layout=neato
  run -- intr;
  intr -- runbl;
  runbl -- run;
  run -- kernel;
  kernel -- zombie;
  kernel -- sleep;
  kernel -- runmem;
  sleep -- swap;
  swap -- runswap;
  runswap -- new;
  runswap -- runmem;
  new -- runmem;
  sleep -- runmem;
}
```

然后，就可以创建一个与图表的交叉引用：

```markdown
@fig-simple
```

{{< include _cross-reference-divs-diagram.qmd >}}

## File Include|文件包含

您可能会发现，在独立的 `.dot` 或 `.mmd` 文件中编辑图表，然后在 `.qmd` 文档中引用它更为方便。您可以通过在 Mermaid 或 Graphviz 单元中添加 `file` 选项来做到这一点。

例如，在这里我们包含了一个非常复杂的图表，如果不在线提供其定义，就会显得过于笨重：

```{{dot}}
//| label: fig-linux-kernel
//| fig-cap: "A diagram of the Linux kernel."
//| file: linux-kernel-diagram.dot
```

```{dot}
//| label: fig-linux-kernel
//| fig-cap: "A diagram of the Linux kernel."
//| file: images/linux-kernel-diagram.dot
```

请注意，`label` 和 `fig-cap `属性在包含 `file`时仍能正常工作。

## Sizing 尺寸化

默认情况下，图表以自然尺寸呈现（即图表不会被拉伸以适应当前文档的默认数字尺寸）。在 HTML 输出格式中，图表也是响应式的，因此其宽度不会超出当前页面的列。这与图像和动态 JavaScript 部件的处理方式类似。

您可以通过指定 `fig-responsive: false` 选项来禁用响应式尺寸。还可以通过 `fig-width` 和 `fig-height` 指定明确的大小。例如，我们想把Mermaid做得更大一些，因为它只包含几个元素：

```{mermaid}
%%| echo: fenced
%%| fig-width: 6.5
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
```

## Mermaid 格式 {#mermaid-formats}

在文档中包含Mermaid图表时，所使用的图表格式会根据输出格式自动选择：

| Format                              | Output                      |
|-------------------------------------|-----------------------------|
| HTML (`html`, `revealjs`, etc.)     | Mermaid native (JavaScript) |
| GitHub Flavored Markdown (`gfm`)    | Mermaid code block          |
| Other Formats (`pdf`, `docx`, etc.) | PNG image                   |

只要底层输出格式支持 JavaScript，就会默认使用Mermaid本地格式。

使用 `format: gfm` 时，图表将以纯 `mermaid` 代码块的形式发布。这是因为 [GitHub](https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/) 和 [GitLab](https://docs.gitlab.com/ee/user/markdown.html#mermaid) 都原生支持从代码渲染Mermaid图。

对于不对 Mermaid 进行特殊处理或缺乏 JavaScript 运行时的格式（如 `pdf`、`docx`、`epub` 等格式），会使用 [Chrome](#chrome-install)创建 PNG 图像。

你可以使用 `mermaid-format` 选项更改默认行为。例如：

``` yaml
---
format:
  gfm:
    mermaid-format: png
---
```

`mermaid格式` 的有效值包括 `js`、`png` 和 `svg`、

## Mermaid 主题 {#mermaid-theming}

{{< include _mermaid-theming.qmd >}}

## Code Echo|代码回显

请注意，与其他可执行单元格处理程序（如 `{python}`）不同，带图表的单元格默认情况下不会在渲染文档中显示代码。您可以通过在单元格顶部的注释中添加 `echo: true` 选项来显示代码。

要包含 `{mermaid}` 的代码，请在单元格顶部添加 `%%| echo: true`。例如：

```{{mermaid}}
%%| echo: true
```

要包含 `{dot}` 的代码，请在单元格顶部添加 `//| echo: true`。例如：

```{{dot}}
//| echo: true
```

## Chrome 安装 {#chrome-install}

如果要打印成 `pdf` 或 `docx `等输出格式，图表渲染会使用 Chrome 或 Edge 网页浏览器来创建高质量的 PNG。

Quarto 可以自动使用系统中现有的 Chrome 或 Edge 版本进行渲染。或者，如果你没有 Chrome 或 Edge 浏览器，也可以使用以下命令安装供 Quarto 使用的最小版本 Chrome 浏览器：

``` {.bash filename="Terminal"}
quarto install chromium
```

::: callout-note
Quarto 通过 Puppeteer 安装无头 Chromium。Puppeteer 安装的捆绑 Chromium 可能无法在 Docker 容器上运行； 请核实 [the Puppeteer documentation](https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-puppeteer-in-docker), 如果您在 Windows Subsystem for Linux (WSL) 中安装, 看[这篇文章](https://pptr.dev/next/troubleshooting#running-puppeteer-on-wsl-windows-subsystem-for-linux "this article")。
:::
