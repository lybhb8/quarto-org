---
title: "您好,Quarto" #"Tutorial: Hello, Quarto"
editor_options:
  markdown:
    wrap: sentence
    canonical: true
---

<!--
#The following is the original English version.
-->

<!--

""{{< include ../_tool-chooser.md >}}""

## Overview

In this tutorial we'll show you how to use Quarto with VS Code.
Before getting started, you should install the [Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto), which includes many tools that enhance working with Quarto, including:

-   Integrated render and preview for Quarto documents.
-   Syntax highlighting for markdown and embedded languages
-   Completion and diagnostics for YAML options
-   Completion for embedded languages (e.g. Python, R, Julia, etc.)
-   Commands and key-bindings for running cells and selected lines.

You can install the Quarto extension from within the **Extensions** tab in VS Code, from the [Extension Marketplace](https://marketplace.visualstudio.com/items?itemName=quarto.quarto), the [Open VSX Registry](https://open-vsx.org/extension/quarto/quarto) or directly from a [VISX extension file](https://github.com/quarto-dev/quarto-vscode#visx-install).

::: callout-note
This tutorial focuses on editing plain text Quarto `.qmd` files in VS Code. Depending on your preferences and the task at hand there are two other editing modes available for Quarto documents: the [Visual Editor](/docs/visual-editor/vscode/index.qmd) and the [Notebook Editor](/docs/tools/vscode-notebook.qmd). For the purposes of learning we recommend you work through this tutorial using the VS Code text editor, then after you've mastered the basics explore using the other editing modes.
:::

### Basic Workflow

Quarto `.qmd` files contain a combination of markdown and executable code cells.
Here's what it might look like in VS Code to edit and preview a `.qmd` file:

![](/docs/tools/images/vscode-render.png){.border fig-alt="Two windows arranged side by side. The window on the left is a qmd file opened in VSCode. The contents of this document are the same as the first part of the Getting Started: Welcome section of this website. The contents of this document are rendered by Quarto in the window on the right."}

The document on the left is *rendered* into the HTML version you see on the right.
This is the basic model for Quarto publishing---take a source document and render it to a variety of [output formats](https://quarto.org/docs/output-formats/all-formats.html), including HTML, PDF, MS Word, etc.

The tutorials will make use of the `matplotlib` and `plotly` Python packages---the commands you can use to install them are given in the table below.

+-----------+---------------------------------------------------+
| Platform  | Commands                                          |
+===========+===================================================+
|           | ```{.bash filename="Terminal"}                    |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly  |
|           | ```                                               |
+-----------+---------------------------------------------------+
|           | ```{.powershell filename="Terminal"}              |
| Windows   | py -m pip install jupyter matplotlib plotly       |
|           | ```                                               |
+-----------+---------------------------------------------------+

::: callout-note
Note that while this tutorial uses Python, using Julia (via the [IJulia](https://julialang.github.io/IJulia.jl/stable/) kernel) is also well supported.
See the article on [Using Julia](/docs/computations/julia.qmd) for additional details.
:::

## Render and Preview

We'll start out by rendering a simple example (`hello.qmd`) to a couple of formats.
If you want to follow along step-by-step in your own environment, create a new file named `hello.qmd` and copy the following content into it.

```` markdown
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

Note that if you are following along be sure to install the required dependencies if you haven't already:

+-----------+----------------------------------------------------+
| Platform  | Commands                                           |
+===========+====================================================+
|           | ```{.bash filename="Terminal"}                     |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly   |
|           | ```                                                |
+-----------+----------------------------------------------------+
|           | ```{.powershell filename="Terminal"}               |
| Windows   | py -m pip install jupyter matplotlib plotly        |
|           | ```                                                |
+-----------+----------------------------------------------------+

To render and preview, execute the **Quarto: Preview** command.
You can alternatively use the <kbd>Ctrl+Shift+K</kbd> keyboard shortcut, or the **Preview** button at the top right of the editor:

![](/docs/tools/images/vscode-preview-button.png){.border fig-alt="The top of the Visual Studio code editor. The right side of the editor tab area includes a Preview button."}

::: {.callout-note appearance="simple"}
Note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts.
:::


### How it Works

When you render a `.qmd` file with Quarto, the executable code blocks are processed by Jupyter, and the resulting combination of code, markdown, and output is converted to plain markdown.
Then, this markdown is processed by [Pandoc](http://pandoc.org/), which creates the finished format.

![](images/qmd-how-it-works.png){alt="" fig-alt="Workflow diagram starting with a qmd file, then Jupyter, then md, then pandoc, then PDF, MS Word, or HTML." fig-align="left"}

### Authoring

Let's try making a small change and then re-rendering:

1.  Change the line of code that defines `theta` as follows:

    ``` python
    theta = 4 * np.pi * r
    ```

2.  Re-render the file (using **Quarto: Preview** or the <kbd>Ctrl+Shift+K</kbd> shortcut) The document is rendered, and the browser preview is updated.

This is the basic workflow for authoring with Quarto.

You do not need to save the file before rendering (as this happens automatically when you render).
If you prefer, you can configure the Quarto extension to render whenever you save a document.
See the documentation on [Render on Save](/docs/tools/vscode.qmd#render-on-save) for additional details.

### Running Cells

You don't need to fully render documents in order to iterate on code cells.
You'll notice that there is a **Run Cell** button above the code cell.
Click that button to execute the cell (output is shown side by side in the Jupyter interactive console):

![](/docs/tools/images/vscode-execute-cell.png){.border fig-alt="VS Code with two panes open, vscode.qmd source code on the right, and the interactive output of that code shown in a second pane on the left."}

Execute the current cell with <kbd>Ctrl+Shift+Enter</kbd>, the current line(s) with <kbd>Ctrl+Enter</kbd>, or previous cells with <kbd>Ctrl+Alt+P</kbd> (note that on the Mac you should use `Cmd` rather than `Ctrl` as the prefix for all Quarto keyboard shortcuts).

There are few different types of content in `hello.qmd`, let's work a bit with each type.

## YAML Options

At the top of the file there is a YAML block with document level options.

``` yaml
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---
```

Try changing the `code-fold` option to `false`:

``` yaml
format: 
  html:
    code-fold: false
```

Then re-render the document (again, no need to save before rendering).
You'll notice that the code is now shown above the plot, where previously it was hidden with a **Code** button that could be used to show it.

## Markdown

Narrative content is written using markdown.
Here we specify a header and a cross-reference to the figure created in the code cell below.

``` markdown
## Polar Axis

For a demonstration of a line plot on a polar axis, see @fig-polar.
```

Try changing the header and re-rendering---the preview will update with the new header text.

## Code Cells

Code cells contain executable code to be run during render, with the output (and optionally the code) included in the rendered document.

```` markdown
```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

You are likely familiar with the Matplotlib code given here.
However, there are some less familiar components at the top of the code cell: `label` and `fig-cap` options.
Cell options are written in YAML using a specially prefixed comment (`#|`).

In this example, the cell options are used to make the figure cross-reference-able.
Try changing the `fig-cap` and/or the code then re-rendering to see the updated preview.

There are a wide variety of [cell options](/docs/reference/cells/cells-jupyter.qmd) that you can apply to tailor your output.
We'll delve into these options in the next tutorial.

::: callout-note
One particularly useful cell option for figures is `fig-alt`, which enables you to add alternative text to images for users with visual impairments.
See Amy Cesal's article on [Writing Alt Text for Data Visualization](https://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81) to learn more.
:::

## External Preview

In this tutorial we've demonstrated previewing rendered output in a pane within VS Code.
If you prefer to use an external browser for preview (or have no preview triggered at all by rendering) you can use the **Preview Type** option to specify an alternate behavior:

![](/docs/tools/images/vscode-preview-settings.png){.border fig-alt="VS Code settings interface with 'quarto preview type' entered into the search bar. User settings reveals Quarto > Render: Preview Type, with a dropdown to select location for document preview after render. The default, internal, is selected, which previews using a side-by-side panel in VS Code. The other two options in the dropdown are external and none."}



""{{< include _footer.md >}}""


Additionally, you may wish to learn about the other editing modes for Quarto documents available within VS Code:

The Visual Editor for WYSIWYG editing of .qmd documents.

The Notebook Editor for editing .ipynb notebooks.

-->

<!--
---
#The above is the original English version.
---
-->




{{< include ../_tool-chooser.md >}}

## 概述

在本教程中，我们将向您展示如何将 Quarto 与 VS Code 结合使用。在开始之前，您应该安装[Quarto VS Code Extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)，其中包括许多可增强 Quarto 工作的工具，包括：

   - quarto文档的集成渲染和预览。
   - Markdown 和嵌入式语言的语法突出显示
   - YAML 选项的完成和诊断
   - 嵌入式语言的补全（例如Python、R、Julia等）
   - 用于运行单元格和选定行的命令和键绑定。
   - 您可以从VS Code 的**Extensions** tab、[Extension Marketplace](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)、[Open VSX Registry](https://open-vsx.org/extension/quarto/quarto) 或直接从[VISX extension file](https://github.com/quarto-dev/quarto-vscode#visx-install)安装 Quarto 扩展。

::: callout-note
本教程重点介绍在 VS Code 中编辑纯文本 Quarto '.qmd'文件。根据您的偏好和手头的任务，还有两种可用于Quarto文档的其他编辑模式：[Visual Editor](/docs/visual-editor/vscode/index.qmd)和[Notebook Editor](/docs/tools/vscode-notebook.qmd)。出于学习目的，我们建议您使用 VS Code 文本编辑器完成本教程，然后在掌握基础知识后探索使用其他编辑模式。
:::

### 基本工作流程

Quarto `.qmd` 包含 Markdown 和可执行代码单元的组合。
在 VS Code 中编辑和预览文件可能如下所示.qmd:

![](/docs/tools/images/vscode-render.png){.border fig-alt="Two windows arranged side by side. The window on the left is a qmd file opened in VSCode. The contents of this document are the same as the first part of the Getting Started: Welcome section of this website. The contents of this document are rendered by Quarto in the window on the right."}

左侧的文档将 *rendered* 渲染为您在右侧看到的 HTML 版本。
这是Quarto部署的基本模型——获取源文档并将其呈现为各种输出格式，包括 HTML、PDF、MS Word 等。

本教程将使用matplotlib和plotlyPython包 ，下表给出了可用于安装它们的命令：

+-----------+---------------------------------------------------+
| Platform  | Commands                                          |
+===========+===================================================+
|           | ```{.bash filename="Terminal"}                    |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly  |
|           | ```                                               |
+-----------+---------------------------------------------------+
|           | ```{.powershell filename="Terminal"}              |
| Windows   | py -m pip install jupyter matplotlib plotly       |
|           | ```                                               |
+-----------+---------------------------------------------------+

::: callout-note
请注意，虽然本教程使用 Python，但也很好地支持使用 Julia（通过[IJulia](https://julialang.github.io/IJulia.jl/stable/) kernel）。有关更多详细信息，请参阅有关[使用 Julia](/docs/computations/julia.qmd)的文章。
:::

## 渲染和预览

我们首先将一个简单的示例 ( hello.qmd) 渲染为几种格式。
如果您想在自己的环境中逐步执行操作，请创建一个名为 的新文件hello.qmd并将以下内容复制到其中。

```` markdown
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

请注意，如果您按照步骤操作，请务必安装所需的依赖项（如果尚未安装）：

+-----------+----------------------------------------------------+
| Platform  | Commands                                           |
+===========+====================================================+
|           | ```{.bash filename="Terminal"}                     |
| Mac/Linux | python3 -m pip install jupyter matplotlib plotly   |
|           | ```                                                |
+-----------+----------------------------------------------------+
|           | ```{.powershell filename="Terminal"}               |
| Windows   | py -m pip install jupyter matplotlib plotly        |
|           | ```                                                |
+-----------+----------------------------------------------------+

T要渲染和预览，请执行 **Quarto: Preview** 命令.
您也可以使用<kbd>Ctrl+Shift+K</kbd>键盘快捷键或编辑器右上角的 **Preview** 按钮：

![](/docs/tools/images/vscode-preview-button.png){.border fig-alt="The top of the Visual Studio code editor. The right side of the editor tab area includes a Preview button."}

::: {.callout-note appearance="simple"}
请注意，在 Mac 上，您应该使用 `Cmd` 而不是 `Ctrl` 作为所有Quarto快捷键的前缀。
:::


### 如何运行

当您使用 `.qmd` Quarto 渲染文件时，可执行代码块由 Jupyter 处理，并且代码、Markdown 和输出的结果组合将转换为纯 Markdown。然后，这个 Markdown 由[Pandoc](http://pandoc.org/)处理，创建最终的格式。

![](images/qmd-how-it-works.png){alt="" fig-alt="Workflow diagram starting with a qmd file, then Jupyter, then md, then pandoc, then PDF, MS Word, or HTML." fig-align="left"}

### 创作

让我们尝试做一些小的改变，然后重新渲染：

1. 更改定义的代码行`theta`如下：

    ``` python
    theta = 4 * np.pi * r
    ```

2. 重新渲染文件（使用**Quarto: Preview**：或<kbd>Ctrl+Shift+K</kbd>快捷方式） 渲染文档，并更新浏览器预览。


这是使用 Quarto 进行创作的基本工作流程。

您不需要在渲染之前保存文件（因为渲染时会自动发生）。如果您愿意，可以将 Quarto 扩展配置为在保存文档时进行渲染。有关其他详细信息，请参阅有关[Render on Save](/docs/tools/vscode.qmd#render-on-save "保存时渲染")的文档。

### 运行代码块

您无需完全渲染文档即可迭代代码单元。您会注意到代码单元格上方有一个 **Run Cell** 按钮。单击该按钮执行该单元（输出在 Jupyter 交互式控制台中并排显示）：

![](/docs/tools/images/vscode-execute-cell.png){.border fig-alt="VS Code with two panes open, vscode.qmd source code on the right, and the interactive output of that code shown in a second pane on the left."}

使用 执行当前单元格 <kbd>Ctrl+Shift+Enter</kbd>,使用 执行当前行 <kbd>Ctrl+Enter</kbd>，或使用上一个单元格执行 <kbd>Ctrl+Alt+P</kbd> （请注意，在 Mac 上，您应该使用`Cmd` 而不是 `Ctrl` 作为所有 Quarto 键盘快捷键的前缀）。

有几种不同类型的内容 `hello.qmd`，让我们对每种类型进行一些研究。

## YAML 选择

文件顶部有一个包含文档级别选项的 YAML 块。

``` yaml
---
title: "Quarto Basics"
format:
  html:
    code-fold: true
jupyter: python3
---
```

尝试将`code-fold`选项更改为`false`：

``` yaml
format: 
  html:
    code-fold: false
```

然后重新渲染文档（同样，渲染前无需保存）。您会注意到代码现在显示在绘图上方，而之前它是通过可用于显示它的 **Code** 按钮隐藏的。

## Markdown 单元块

叙述内容是使用 Markdown 编写的。
在这里，我们指定标题和对下面代码单元中创建的图形的交叉引用。

``` markdown
## 极坐标

For a demonstration of a line plot on a polar axis, see @fig-polar.
```

尝试更改标题并重新渲染 - 预览将使用新的标题文本进行更新。

## 代码块

代码块包含要在渲染期间运行的可执行代码，输出（以及可选的代码）包含在渲染的文档中。

```` markdown
```{{python}}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```
````

您可能熟悉此处给出的 Matplotlib 代码。但是，代码单元顶部有一些不太熟悉的组件：`label` 和 `fig-cap` 选项。
单元格选项是使用特殊前缀注释 ( `#|`) 以 YAML 编写的。
在此示例中，单元格选项用于使图形可以交叉引用。
尝试更改`fig-cap` 和/或 代码，然后重新渲染以查看更新后的预览。
您可以应用多种 [cell options](/docs/reference/cells/cells-jupyter.qmd) 来定制输出。
我们将在下一个教程中深入研究这些选项。

::: callout-note
对于图形来说，一个特别有用的单元格选项是 `fig-alt`，它使您能够为有视觉障碍的用户向图像添加替代文本。请参阅 Amy Cesal 的有关为[Writing Alt Text for Data Visualization](https://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81  "为数据可视化编写替代文本" ) 的文章以了解更多信息。
:::

## 外部预览

在本教程中，我们演示了在 VS Code 的窗格中预览渲染的输出。如果您更喜欢使用外部浏览器进行预览（或者根本没有通过渲染触发预览），您可以使用 **Preview Type** 选项来指定替代行为：

![](/docs/tools/images/vscode-preview-settings.png){.border fig-alt="VS Code settings interface with 'quarto preview type' entered into the search bar. User settings reveals Quarto > Render: Preview Type, with a dropdown to select location for document preview after render. The default, internal, is selected, which previews using a side-by-side panel in VS Code. The other two options in the dropdown are external and none."}


{{< include _footer.md >}}



此外，您可能希望了解 VS Code 中可用的 Quarto文档的其他编辑模式：

-  用于WYSIWYG(所见即所得)[Visual Editor](/docs/visual-editor/vscode/index.qmd "可视化编辑器")  编辑 `.qmd` 文档 .

- 用[Notebook Editor](/docs/tools/vscode-notebook.qmd) 编辑 `.ipynb notebooks` 文档。
